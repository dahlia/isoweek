import datetime
from typing import ClassVar, Iterable, NamedTuple, Optional, Sequence, Tuple


class Week(NamedTuple):
    year: int
    week: int

    @classmethod
    def thisweek(cls) -> 'Week': ...

    @classmethod
    def fromordinal(cls, ordinal: int) -> 'Week': ...

    @classmethod
    def fromstring(cls, isostring: str) -> 'Week': ...

    @classmethod
    def withdate(cls, date: datetime.date) -> 'Week': ...

    @classmethod
    def weeks_of_year(cls, year: int) -> Iterable['Week']: ...

    @classmethod
    def last_week_of_year(cls, year: int) -> 'Week': ...

    def day(self, num: int) -> datetime.date: ...
    def monday(self) -> datetime.date: ...
    def tuesday(self) -> datetime.date: ...
    def wednesday(self) -> datetime.date: ...
    def thursday(self) -> datetime.date: ...
    def friday(self) -> datetime.date: ...
    def saturday(self) -> datetime.date: ...
    def sunday(self) -> datetime.date: ...
    def days(self) -> Sequence[datetime.date]: ...
    def contains(self, day: datetime.date) -> bool: ...
    def toordinal(self) -> int: ...

    def replace(self, year: Optional[int] = None, week: Optional[int] = None):
        ...

    def year_week(self) -> Tuple[int, int]: ...
    def __str__(self) -> str: ...
    def isoformat(self) -> str: ...
    def __repr__(self) -> str: ...
    def __add__(self, other: Union[int, datetime.timedelta]) -> 'Week': ...
    def __sub__(self, other: Union[int, datetime.timedelta]) -> 'Week': ...

Week.min: ClassVar['Week']
Week.max: ClassVar['Week']
Week.resolution: ClassVar[datetime.timedelta]
